import { useState, useRef, useEffect } from "react";
import { Accelerometer } from "expo-sensors";
import {
  calculateDepth,
  calculateMagnitude,
  getDepthScore,
  isCompression,
} from "../cpr.helper";

const TARGET_INTERVAL_MS = 500;
const TOLERANCE_MS = 100;
const UPDATE_INTERVAL = 16.67;

const useCpr = () => {
  const [accelerometerData, setAccelerometerData] = useState({
    x: 0,
    y: 0,
    z: 0,
  });
  const [compressionCount, setCompressionCount] = useState(0);
  const [timingScore, setTimingScore] = useState("");
  const [isMonitoring, setIsMonitoring] = useState(false);

  const lastCompressionTime = useRef(null);
  const compressionTimer = useRef(0);
  const subscription = useRef(null);
  const [compressionDepth, setCompressionDepth] = useState(null);
  const [depthScore, setDepthScore] = useState("");

  useEffect(() => {
    if (isMonitoring) {
      Accelerometer.setUpdateInterval(UPDATE_INTERVAL); // update interval to 60Hz (16.67ms)
      subscription.current = Accelerometer.addListener(handleAccelerometerData);

      const timerInterval = setInterval(() => {
        if (compressionTimer.current >= TARGET_INTERVAL_MS) {
          // If timer exceeds 500ms, set timingScore to "Missed" and reset timer
          setTimingScore("Missed");
          setDepthScore("Missed");

          resetTimingScore();
          resetDepthScore();
          compressionTimer.current = 0;
        } else {
          compressionTimer.current += UPDATE_INTERVAL;
        }
      }, UPDATE_INTERVAL);

      return () => {
        clearInterval(timerInterval);
        subscription.current?.remove();
      };
    } else {
      subscription.current?.remove();
    }
  }, [isMonitoring]);

  const handleAccelerometerData = (data) => {
    const magnitude = calculateMagnitude(data);

    if (isCompression(magnitude, lastCompressionTime.current)) {
      const now = Date.now();
      const compressionInterval = now - lastCompressionTime.current;

      evaluateTiming(compressionInterval);
      setCompressionCount((prev) => prev + 1);

      // Calculate depth based on the z-axis acceleration
      const depth = calculateDepth(data.z);
      setCompressionDepth(depth);
      setDepthScore(getDepthScore(depth));
      console.log(depth);
      resetDepthScore();
      lastCompressionTime.current = now;
      compressionTimer.current = 0;
    }

    setAccelerometerData(data);
  };

  const evaluateTiming = (interval) => {
    if (Math.abs(interval - TARGET_INTERVAL_MS) <= TOLERANCE_MS) {
      setTimingScore("Perfect");
    } else if (interval < TARGET_INTERVAL_MS - TOLERANCE_MS) {
      setTimingScore("Too Fast");
    } else {
      setTimingScore("Missed");
    }

    resetTimingScore();
  };

  const resetTimingScore = () => {
    setTimeout(() => {
      setTimingScore("");
    }, 150);
  };

  const resetDepthScore = () => {
    setTimeout(() => {
      setCompressionDepth(null);
      setDepthScore("");
    }, 150);
  };

  const startMonitoring = () => {
    setCompressionCount(0);
    setTimingScore("");
    setCompressionDepth(null);
    setDepthScore("");
    lastCompressionTime.current = null;
    compressionTimer.current = 0;
    setIsMonitoring(true);
  };

  const stopMonitoring = () => {
    setIsMonitoring(false);
  };

  return {
    accelerometerData,
    compressionCount,
    timingScore,
    compressionDepth,
    depthScore,
    isMonitoring,
    startMonitoring,
    stopMonitoring,
  };
};

export default useCpr;
